class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
     
        Map<Integer,Integer> map= new HashMap<Integer,Integer>();
        for(int j=0;j<nums2.length;j++){
            int count=map.getOrDefault(nums2[j],0);
            count++;
            
            map.put(nums2[j],count);
        } //맵에 저장
        
        List<Integer> res = new ArrayList<Integer>(); //result 저장하는 리스트
        
        for (int i=0; i<nums1.length; i++) {
         int cnt = map.getOrDefault(nums1[i], 0);
        if (cnt > 0) {
         res.add(nums1[i]);
         cnt --;
         map.put(nums1[i], cnt);
          }
        }
        //리스트 값 배열로 복사
        int[] result= new int[res.size()];
        for(int i=0;i<res.size();i++){
            result[i]=res.get(i);
        }
        
        return result;
    }
}

public int[] intersect(int[] nums1, int[] nums2) {
   if (nums1.length == 0 || nums2.length == 0) {
      return new int[] {};
   }
   Arrays.sort(nums1);
   Arrays.sort(nums2);
   
   int i=0;
   int j=0;
   
   List<Integer> res = new ArrayList<Integer>();
   while (i<nums1.length && j<nums2.length) {
      if (nums1[i] == nums2[j]) {
         res.add(nums1[i]);
         i++;
         j++;
      }
      else if (nums1[i] < nums2[j]) {
         i++;
      }
      else {
         j++;
      }
   }
   
   //copy the result array
   int[] r = new int[res.size()];
   for (i=0; i<res.size(); i++) {
      r[i] = res.get(i);
   }
   
   return r;
} //sorting 사용