class Solution {
    public int singleNumber(int[] nums) {
      List <Integer> no_duplicate=new ArrayList<>();
        
        for(int i:nums)
        {
            if(!no_duplicate.contains(i)){ //갖고 있지 않으면 더하고
                no_duplicate.add(i);
            }else{
                no_duplicate.remove(new Integer(i)); //갖고 있으면 버리기
            }
        }
        return no_duplicate.get(0);
        
    }
} //리스트 사용 o(n^2)

class Solution {
    public int singleNumber(int[] nums) {
      HashMap<Integer,Integer> hash_table=new HashMap<>();
      
    for(int i:nums)
    {
        hash_table.put(i,hash_table.getOrDefault(i,0)+1);
    }
    for(int i:nums){
      if(hash_table.get(i)==1){
          return i;
      }   
    }
        return 0;
    }
} // o(n)  hashmap


class Solution {
  public int singleNumber(int[] nums) {
    int sumOfSet = 0, sumOfNums = 0;
    Set<Integer> set = new HashSet();

    for (int num : nums) {
      if (!set.contains(num)) {
        set.add(num);
        sumOfSet += num;
      }
      sumOfNums += num;
    }
    return 2 * sumOfSet - sumOfNums;
  }
} // 간단한 수학이용  2(a+b+c)-(a+a+b+b+c)=c


class Solution {
  public int singleNumber(int[] nums) {
    int a = 0;
    for (int i : nums) {
      a ^= i;
    }
    return a;
  }
} //xor 연산자 이용 



boolean remove(Object o)
- 지정된 object 가 list 내에 존재하면 존재하는 첫번째 항목을 제거합니다

getOrDefault(Object key, V defaultValue)    반환형: V

Hashtable 객체에 입력되는 key값과 mapping된 value값이 존재하면 그 값을 반환하고 없을 경우 입력된 defaultValue값을 반환합니다. 

a xor 0 =a , a xor a = 0     a xor b xor a= a xor a xor b = 0 xor b = b 